package edu.whut.cs.oo.service.impl;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.List;

import edu.whut.cs.oo.Application;
import edu.whut.cs.oo.common.Constants;
import edu.whut.cs.oo.common.Message;
import edu.whut.cs.oo.dao.ArchiveDao;
import edu.whut.cs.oo.domain.Archive;
import edu.whut.cs.oo.domain.User;
import edu.whut.cs.oo.exception.BaseException;
import edu.whut.cs.oo.exception.NoObjectException;
import edu.whut.cs.oo.service.ArchiveService;



public class ArchiveServiceClient extends BaseServiceClient implements ArchiveService{
	
	private ArchiveDao archiveDao;
	
	@Override
	public void setArchiveDao(ArchiveDao archiveDao) {
		
	}
	@Override
	public  Archive uploadArchive(Archive archive) throws BaseException {
		Message message = new Message();
		message.setController(Constants.UPLOAD_ARCHIVE_CONTROLLER);
		archive.setFileName(getFileName(archive.getSourcePath()));
		archive.setUser(Application.currentUser);
		message.setParameter("archive", archive);
		message = sendArchive(message);
		archive = (Archive)message.getData();
		return archive;
	}

	@Override
	public Archive downloadArchive(long id, String targetPath) throws BaseException, IOException {
		Message message = new Message();
		message.setController(Constants.DOWNLOAD_ARCHIVE_CONTROLLER);
		message.setParameter("id", id);
		message = receiveArchive(message, targetPath);
		Archive archive = (Archive)message.getData();
		return archive;

	}

	public Archive deleteArchive(long id) throws BaseException {
		Message message = new Message();
		message.setController(Constants.DELETE_ARCHIVE_CONTROLLER);
		message.setParameter("id", id);
		message = send(message);
		Archive archive = (Archive)message.getData();
		return archive;
	}


	public Archive getArchive(long id) throws BaseException {
		Message message = new Message();
		message.setController(Constants.GET_ARCHIVE_CONTROLLER);
		message.setParameter("id", id);
		message = send(message);
		Archive archive = (Archive)message.getData();
		return archive;
	}


	public List<Archive> getAllArchives() throws BaseException {
		Message message = new Message();
		message.setController(Constants.GET_ALL_ARCHIVES_CONTROLLER);
		message = send(message);
		@SuppressWarnings("unchecked")
		List<Archive> archives = (List<Archive>)message.getData();
		return archives;
		}


	public void clear() throws BaseException {
		Message message = new Message();
		message.setController(Constants.CLEAR_ALL_ARCHIVES_CONTROLLER);
		message = send(message);		
	}


	public List<Archive> findByTitle(String title) throws BaseException {
		Message message=new Message();
		message.setController(Constants.FIND_ARCHIVE_CONTROLLER );
		message=send(message);
		@SuppressWarnings("unchecked")
		List<Archive> archives = (List<Archive>)message.getData();
		return archives;
	}
	public List<Archive> findById(String id) throws BaseException {
		Message message=new Message();
		message.setController(Constants.GET_ALL_ARCHIVES_CONTROLLER);
		message=send(message);
		@SuppressWarnings("unchecked")
		List<Archive> archives = (List<Archive>)message.getData();
		for (Archive archive : archives) {
			if(id.equals(archive.getId())) {
				archives.add(archive);
			}	
		}
		return archives;
	}
	@Override
	public Archive updateArchive(Archive archive) throws BaseException {
		Message message = new Message();
		message.setController(Constants.UPDATE_ARCHIVE_CONTROLLER);
		message.setParameter("archive", archive);
		message = send(message);
		archive = (Archive)message.getData();
		return archive;
	}
	@Override
	public Archive createArchive(Archive archive) throws BaseException {
		Message message = new Message();
		message.setController(Constants.CREATE_ARCHIVE_CONTROLLER);
		message.setParameter("archive", archive);
		message = send(message);
		archive = (Archive)message.getData();
		return archive;
	}
	
	
}
